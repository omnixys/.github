@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package bankkonto #AA55AA {
  package entity #FFFFFF {
    class Bankkonto <<entity>>
  }

  package service #FFFFFF {
    class BankkontoWriteService << control >>
  }

  class "type BankkontoDTO = Omit<Bankkonto, 'transaktionen' | 'aktualisiert' | 'erzeugt'" as BankkontoDTO
  hide BankkontoDTO circle

    interface IdInput {
        bankkontoId: number
    }

  class BankkontoMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() bankkontoDTO: BankkontoDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() bankkontoDTO: BankkontoDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() bankkontoId: IdInput): Promise<boolean>
  }

  BankkontoMutationResolver o-down-> "1" BankkontoWriteService : service

  BankkontoMutationResolver ..> Bankkonto
  BankkontoMutationResolver ..> BankkontoDTO
  BankkontoMutationResolver ..> IdInput
  BankkontoDTO .up.> Bankkonto
  BankkontoMutationResolver ..> Promise
  BankkontoMutationResolver ..> Resolver

  BankkontoMutationResolver .up.> AuthGuard
  BankkontoMutationResolver .up.> Roles

  BankkontoDTO .[hidden].> Promise
  BankkontoDTO .[hidden].> Resolver
}

hide empty members

footer (c) Gruppe 4

@enduml
