@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@Get" as Get
  hide Get circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Query" as Query
  hide Query circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle
}

package express {
  class Request
  class Response

  Response .[hidden].> Controller
}

package bankkonto {
  package entity #FFFFFF {
    class bankkonto <<entity>>

    Bankkonto .[hidden].> Promise
    Bankkonto .[hidden].> Request
  }

  package service {
    class BankkontoReadService << control >>
  }

  package rest #DDDDDD {
    BankkontoQuery -up-|> Bankkonto

    class BankkontoGetController << control >> << @Controller() >> << @UseInterceptors() >> {
      + @Get() async getByBankkontoId(@Param() bankkontoId: number, @Req() req: Request, @Headers() version: string, @Res() res: Response): Promise<Response<BankkontoModel | undefined>>
      + @Get() async get(@Query() query: BankkontoQuery, @Req() req: Request,  @Res() res: Response): Promise<Response<BankkontenModel | undefined>>
    }

    BankkontoGetController o--> "1" BankkontoReadService : service

    BankkontoGetController ..> Controller
    BankkontoGetController ..> Request
    BankkontoGetController ..> Response
    BankkontoGetController ..> Promise
    BankkontoGetController .up.> BankkontoModel
    BankkontoGetController .up.> BankkontoQuery

    BankkontoReadService .[hidden].> Request
    BankkontoReadService .[hidden].> Promise
    Response .right[hidden].> Controller
  }
}

hide empty members

footer (c) Gruppe 4

@enduml
